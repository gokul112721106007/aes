`timescale 1ns / 1ps

module subbytes_tb;

    // Inputs
    reg clk;
    reg [127:0] data;

    // Outputs
    wire [127:0] s_data_out;

    // Instantiate the subbytes module
    subbytes uut (
        .clk(clk),
        .data(data),
        .s_data_out(s_data_out)
    );

    // Clock generation (toggle every 5 time units)
    always #5 clk = ~clk;

    // Test sequence
    initial begin
        // Open a file to log the results
        $dumpfile("subbytes_tb.vcd");  // Save waveform data to this file
        $dumpvars(0, subbytes_tb);     // Dump all variables

        // Initialize inputs
        clk = 0;
        data = 128'h00112233445566778899aabbccddeeff; // Example input

        // Wait for the SubBytes operation to complete
        #20;

        // Display the results
        $display("Data In: %h", data);
        $display("SubBytes Out: %h", s_data_out);

        // Verify the output against the expected result
        if (s_data_out === 128'h63cab7040953d051cd60e0e7ba70e18c) begin
            $display("Test Passed: SubBytes Out is correct!");
        end else begin
            $display("Test Failed: SubBytes Out is incorrect!");
        end

        // End simulation
        $finish;
    end

endmodule
