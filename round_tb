`timescale 1ns / 1ps

module round_tb;

    // Inputs
    reg clk;
    reg [127:0] data_in;
    reg [127:0] key_in;

    // Outputs
    wire [127:0] data_out;

    // Instantiate the round module
    round uut (
        .clk(clk),
        .data_in(data_in),
        .key_in(key_in),
        .data_out(data_out)
    );

    // Clock generation (toggle every 5 time units)
    always #5 clk = ~clk;

    // Test sequence
    initial begin
        // Open a file to log the results
        $dumpfile("round_tb.vcd");  // Save waveform data to this file
        $dumpvars(0, round_tb);     // Dump all variables

        // Initialize inputs
        clk = 0;
        data_in = 128'h00112233445566778899aabbccddeeff; // Example data input
        key_in = 128'h000102030405060708090a0b0c0d0e0f;  // Example key input

        // Wait for the round to complete
        #20;

        // Display the results
        $display("Data In: %h", data_in);
        $display("Key In: %h", key_in);
        $display("Data Out: %h", data_out);

        // Verify the output against the expected result
        if (data_out === 128'h69c4e0d86a7b0430d8cdb78070b4c55a) begin
            $display("Test Passed: Data Out is correct!");
        end else begin
            $display("Test Failed: Data Out is incorrect!");
        end

        // End simulation
        $finish;
    end

endmodule
